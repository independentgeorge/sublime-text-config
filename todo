
FINDS
[+] replace_prev
[+] find_under_expand_prev
[+] make find_under[_expand] always respect case and whole word settings of find panel
[+] toggling of find options must work outside panel (regardless of focus, selection, and openness)
 (since only those are highlighted)!
[+] close find panel on focus lost
[+] ctrl+r open find panel if not already
[+] open_panel and close_panel
[+] find_selected_text vs under => i think find_under_expand works that way regardless of setting => so the point of under is for that to work regardless of setting (but then, if setting is on, we dont have to slurp when finding?)
[+] move selection modifications to a TextCommand (hmm, move the entire FindCommand? why have two, we can access self.view.window().active_view() anyway)
[ ] find_under_expand must not care about in_selection (as panel can be hidden) it will simply slurp the multiline selection
[ ] highlight find in selection selection (a simple border will do, this will work great with panel autohiding on lost focus)
[ ] keep find panel open on find in files search
[ ] highlight matches as if find panel always open (not matching only whole word stuff); this probably won't be workaroundable by using the builtin highlights while panel is open (as it must work regardless of it), so tracking the current state of find panel settings will be a must (first opening nukes settings to false, from there we can track toggles and shit) + show settings in status bar? considering we have access...
[ ] add project root to find in files by default
[ ] better find in files exclusion folder settings
[ ] rebind replace all (together with find all on same button?) (ctrl t is creates new tab)

=====================================
[keybind] ctrl+shift+t <> reopen last tab
[keybind] ctrl+w <> close tab
[keybind] ctrl+shift+w <> close tabs to the right
[terminus/setting] always open terminus in project root (only if no project at current file, or maybe if file not part of project)
---
[style] font_size++ in sidebar
[style] font_size++ in command palette (hmm, in a nested one, like view package file's list, is that package specific or general?)
[keybind] ctrl+space fucked up in python syntax
[keybind] remove keybindings of added packages!
[keybind] f10 show scope name
[keybind] toggle_case
[keybind] rebind [] () {}
[keybind] terminus reset + clear
[keybind] ??? change syntax
[keybind] ??? move file to group
[keybind] ??? fold tag (xml) attributes
---
[terminus/keybind/plugin] ctrl+shift+w that is reopening last closed tab must work on terminus
[terminus/keybind/plugin] mouse selection
[terminus/keybind/plugin] ctrl+shift+left/right caught by sublime, we want a terminal selection 
[terminus/setting/plugin] creating a new tab when not in project must inherit current cwd from the current terminal (as file's path works)
[terminus/style] padding since no line numbers (maybe add some generally, to any tab)
[terminus/style] disable "word wrap" -> set a min col width?
[terminus/style] tab colour should reflect bg colour... or some other kind of indicator


PLUGINS
[ ] all EventListeners that are on based on a setting must be ViewEventListeners
[ ] indent pasted text if _auto_convert_indentation on
[ ] indicator when swapping groups (like cursor line blink)
[ ] keep undo history after closing
[ ] start new windows in fullscreen (or same size as main window)
[ ] improve curly brackets auto pairing (simply wrap text that follows until a newline or same level indentation?), careful not to fuck (js) objects up
[ ] i know there is something bothering me about quote auto-pairing, when mixing ' and "


MENUS
- Main (mnemonics, try hiding it with no alt+ conflicts)
- Side Bar Mount Point
- Side Bar
- Tab Context
- Context (sort lines?, unique lines?, reverse lines?, shuffle lines?)
- Find in Files
- Widget Context (...Technically this file name can be changed via the "context_menu" setting inside of Widget.sublime-settings. - CHECK IF THIS IS TRUE FOR ALL OF THEM (hmm, all contexts at least), THAT IS, WHY DOES Default.sublime-preferences' context_menu REFER TO Context.sublime-menu...)


PACKAGES
- HyperClick (https://packagecontrol.io/packages/HyperClick)
- SublimeLinter (https://packagecontrol.io/packages/SublimeLinter) + language specific linters
- ??? LSP (https://packagecontrol.io/packages/LSP) + language specific servers
- hex file editor
- a colour highlighter
- a colour picker
- a prettyfier
